#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef BACKTRACE_SWIFT_H
#define BACKTRACE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Backtrace",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
enum BacktraceLogLevel : NSInteger;
@class NSString;

/// Abstract class that provides logging functionality.
/// A methods <code>func log(level:msg:file:function:line:)</code> is abstract and needs to be overridden.
SWIFT_CLASS("_TtC9Backtrace24BacktraceBaseDestination")
@interface BacktraceBaseDestination : NSObject
/// Initialize <code>BacktraceBaseDestination</code> with given level.
/// \param level logging level
///
- (nonnull instancetype)initWithLevel:(enum BacktraceLogLevel)level OBJC_DESIGNATED_INITIALIZER;
/// An abstract method used to log message to provided destination.
/// \param level logging level
///
/// \param msg message to log
///
/// \param file the name of the file in which it appears
///
/// \param function the name of the declaration in which it appears
///
/// \param line the line number on which it appears
///
- (void)logWithLevel:(enum BacktraceLogLevel)level msg:(NSString * _Nonnull)msg file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, BacktraceBreadcrumbLevel, open) {
  BacktraceBreadcrumbLevelDebug = 1,
  BacktraceBreadcrumbLevelInfo = 2,
  BacktraceBreadcrumbLevelWarning = 3,
  BacktraceBreadcrumbLevelError = 4,
  BacktraceBreadcrumbLevelFatal = 5,
};

@class BacktraceBreadcrumbs;
@class BacktraceBreadcrumbSettings;
enum BacktraceBreadcrumbType : NSInteger;

/// Provides Breadcrumb adding functionality to <code>BacktraceClient</code>.
SWIFT_PROTOCOL("_TtP9Backtrace27BacktraceBreadcrumbProtocol_")
@protocol BacktraceBreadcrumbProtocol
@property (nonatomic, readonly, strong) BacktraceBreadcrumbs * _Nonnull breadcrumbs;
/// Enable breadcrumbs with default BradcrumbsSettings
- (void)enableBreadcrumbs;
/// Enable breadcrumbs
/// \param breadcrumbSettings bradcrumb settings.
///
- (void)enableBreadcrumbs:(BacktraceBreadcrumbSettings * _Nonnull)breadcrumbSettings;
/// Adds a breadcrumb to the breadcrumb trail. The breadcrumb plus attributes should not exceed 4kB, or it will be discarded.
/// \param message The message to add.
///
/// \param attributes The attributes to attach to the the breadcrumb
///
/// \param type The Breadcrumb type to add
///
/// \param level The breadcrumb severity level to add
///
- (BOOL)addBreadcrumb:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes type:(enum BacktraceBreadcrumbType)type level:(enum BacktraceBreadcrumbLevel)level SWIFT_WARN_UNUSED_RESULT;
/// Adds a breadcrumb to the breadcrumb trail. The breadcrumb plus attributes should not exceed 4kB, or it will be discarded.
/// \param message The message to add.
///
- (BOOL)addBreadcrumb:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Adds a breadcrumb to the breadcrumb trail. The breadcrumb plus attributes should not exceed 4kB, or it will be discarded.
/// \param message The message to add.
///
/// \param attributes The attributes to attach to the the breadcrumb
///
- (BOOL)addBreadcrumb:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
/// Adds a breadcrumb to the breadcrumb trail. The breadcrumb plus attributes should not exceed 4kB, or it will be discarded.
/// \param message The message to add.
///
/// \param type The Breadcrumb type to add
///
/// \param level The breadcrumb severity level to add
///
- (BOOL)addBreadcrumb:(NSString * _Nonnull)message type:(enum BacktraceBreadcrumbType)type level:(enum BacktraceBreadcrumbLevel)level SWIFT_WARN_UNUSED_RESULT;
/// Adds a breadcrumb to the breadcrumb trail. The breadcrumb plus attributes should not exceed 4kB, or it will be discarded.
/// \param message The message to add.
///
/// \param level The breadcrumb severity level to add
///
- (BOOL)addBreadcrumb:(NSString * _Nonnull)message level:(enum BacktraceBreadcrumbLevel)level SWIFT_WARN_UNUSED_RESULT;
/// Adds a breadcrumb to the breadcrumb trail. The breadcrumb plus attributes should not exceed 4kB, or it will be discarded.
/// \param message The message to add.
///
/// \param type The Breadcrumb type to add
///
- (BOOL)addBreadcrumb:(NSString * _Nonnull)message type:(enum BacktraceBreadcrumbType)type SWIFT_WARN_UNUSED_RESULT;
/// Clear breadcrumbs
- (BOOL)clearBreadcrumbs SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURL;

/// Backtrace error-free breadcrumb settings
SWIFT_CLASS("_TtC9Backtrace27BacktraceBreadcrumbSettings")
@interface BacktraceBreadcrumbSettings : NSObject
/// Max byte size of breadcrumb
@property (nonatomic) NSInteger maxIndividualBreadcrumbSizeBytes;
/// Max byte size of breadcrumbs file. Note this has to be a power of 2 (4k, 8k, 16k, 32k, 64k)
@property (nonatomic) NSInteger maxQueueFileSizeBytes;
/// File name to write breadcrumb
@property (nonatomic, readonly, copy) NSString * _Nonnull breadcrumbLogFileName;
/// Breadcrumb level allow to add
@property (nonatomic) enum BacktraceBreadcrumbLevel breadcrumbLevel;
- (nonnull instancetype)init:(NSInteger)maxIndividualBreadcrumbSizeBytes maxQueueFileSizeBytes:(NSInteger)maxQueueFileSizeBytes breadcrumbLogFileName:(NSString * _Nonnull)breadcrumbLogFileName breadcrumbTypes:(NSArray<NSNumber *> * _Nonnull)breadcrumbTypes breadcrumbLevel:(NSInteger)breadcrumbLevel OBJC_DESIGNATED_INITIALIZER;
- (NSURL * _Nullable)getBreadcrumbLogPathAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, BacktraceBreadcrumbType, open) {
  BacktraceBreadcrumbTypeManual = 1,
  BacktraceBreadcrumbTypeLog = 2,
  BacktraceBreadcrumbTypeNavigation = 3,
  BacktraceBreadcrumbTypeHttp = 4,
  BacktraceBreadcrumbTypeSystem = 5,
  BacktraceBreadcrumbTypeUser = 6,
  BacktraceBreadcrumbTypeConfiguration = 7,
};


SWIFT_CLASS("_TtC9Backtrace20BacktraceBreadcrumbs")
@interface BacktraceBreadcrumbs : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BacktraceClientCustomizing;
@protocol BacktraceLogging;
@protocol BacktraceMetricsProtocol;
@protocol BacktraceReporting;
@class BacktraceClientConfiguration;
@class BacktraceCredentials;
@class BacktraceCrashReporter;

/// Provides the default implementation of <code>BacktraceClientProtocol</code> protocol.
SWIFT_CLASS("_TtC9Backtrace15BacktraceClient")
@interface BacktraceClient : NSObject
/// Shared instance of BacktraceClient class. Should be created before sending any reports.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <BacktraceBreadcrumbProtocol, BacktraceClientCustomizing, BacktraceLogging, BacktraceMetricsProtocol, BacktraceReporting> _Nullable shared;)
+ (id <BacktraceBreadcrumbProtocol, BacktraceClientCustomizing, BacktraceLogging, BacktraceMetricsProtocol, BacktraceReporting> _Nullable)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(id <BacktraceBreadcrumbProtocol, BacktraceClientCustomizing, BacktraceLogging, BacktraceMetricsProtocol, BacktraceReporting> _Nullable)value;
/// <code>BacktraceClient</code>’s configuration. Allows to configure <code>BacktraceClient</code> in a custom way.
@property (nonatomic, readonly, strong) BacktraceClientConfiguration * _Nonnull configuration;
/// Initialize <code>BacktraceClient</code> with credentials. To learn more about credentials, see
/// https://help.backtrace.io/troubleshooting/what-is-a-submission-url
/// and https://help.backtrace.io/troubleshooting/what-is-a-submission-token .
/// \param credentials Credentials to register in Backtrace services.
///
/// \param crashReporter Instance of the crash reporter to inject.
///
///
/// throws:
/// throws an error in case of failure.
- (nullable instancetype)initWithCredentials:(BacktraceCredentials * _Nonnull)credentials crashReporter:(BacktraceCrashReporter * _Nonnull)crashReporter error:(NSError * _Nullable * _Nullable)error;
/// Initialize <code>BacktraceClient</code> with credentials. To learn more about credentials, see
/// https://help.backtrace.io/troubleshooting/what-is-a-submission-url
/// and https://help.backtrace.io/troubleshooting/what-is-a-submission-token .
/// \param credentials Credentials to register in Backtrace services.
///
///
/// throws:
/// throws an error in case of failure.
- (nullable instancetype)initWithCredentials:(BacktraceCredentials * _Nonnull)credentials error:(NSError * _Nullable * _Nullable)error;
/// Initialize <code>BacktraceClient</code> with <code>BacktraceClientConfiguration</code> instance. Allows to configure <code>BacktraceClient</code>
/// in a custom way.
/// \param configuration <code>BacktraceClient</code>s configuration.
///
///
/// throws:
/// throws an error in case of failure.
- (nullable instancetype)initWithConfiguration:(BacktraceClientConfiguration * _Nonnull)configuration error:(NSError * _Nullable * _Nullable)error;
/// Initialize <code>BacktraceClient</code> with <code>BacktraceClientConfiguration</code> instance. Allows to configure <code>BacktraceClient</code>
/// in a custom way.
/// \param configuration <code>BacktraceClient</code>s configuration.
///
/// \param crashReporter Instance of the crash reporter to inject.
///
///
/// throws:
/// throws an error in case of failure.
- (nullable instancetype)initWithConfiguration:(BacktraceClientConfiguration * _Nonnull)configuration crashReporter:(BacktraceCrashReporter * _Nonnull)crashReporter error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides logging functionality to <code>BacktraceClient</code>.
SWIFT_PROTOCOL("_TtP9Backtrace16BacktraceLogging_")
@protocol BacktraceLogging
/// Set of logging destinations.
@property (nonatomic, copy) NSSet<BacktraceBaseDestination *> * _Nonnull loggingDestinations;
@end


@interface BacktraceClient (SWIFT_EXTENSION(Backtrace)) <BacktraceLogging>
/// A collection of logging destinations.
@property (nonatomic, copy) NSSet<BacktraceBaseDestination *> * _Nonnull loggingDestinations;
@end

@class BacktraceMetrics;

/// Provides error-free metrics functionality to <code>BacktraceClient</code>
SWIFT_PROTOCOL("_TtP9Backtrace24BacktraceMetricsProtocol_")
@protocol BacktraceMetricsProtocol
@property (nonatomic, readonly, strong) BacktraceMetrics * _Nonnull metrics;
@end


@interface BacktraceClient (SWIFT_EXTENSION(Backtrace)) <BacktraceMetricsProtocol>
/// Error-free metrics class instance
@property (nonatomic, readonly, strong) BacktraceMetrics * _Nonnull metrics;
@end

@protocol BacktraceClientDelegate;

/// Provides customization functionality to <code>BacktraceClient</code>.
SWIFT_PROTOCOL("_TtP9Backtrace26BacktraceClientCustomizing_")
@protocol BacktraceClientCustomizing
/// Additional attributes which are automatically added to each report.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
/// Additional file attachments which are automatically added to each report.
@property (nonatomic, copy) NSArray<NSURL *> * _Nonnull attachments;
/// The object that acts as the delegate object of the <code>BacktraceClient</code> instance.
@property (nonatomic, strong) id <BacktraceClientDelegate> _Nullable delegate;
@end


@interface BacktraceClient (SWIFT_EXTENSION(Backtrace)) <BacktraceClientCustomizing>
/// The object that acts as the delegate object of the <code>BacktraceClient</code>.
@property (nonatomic, strong) id <BacktraceClientDelegate> _Nullable delegate;
/// Additional attributes which are automatically added to each report.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
/// Additional file attachments which are automatically added to each report.
@property (nonatomic, copy) NSArray<NSURL *> * _Nonnull attachments;
@end

@class BacktraceResult;
@class NSException;

/// Provides connectivity functionality to <code>BacktraceClient</code>.
SWIFT_PROTOCOL("_TtP9Backtrace18BacktraceReporting_")
@protocol BacktraceReporting
/// Automatically generates and sends a crash report to Backtrace services.
/// The services response is returned in a completion block.
/// \param error An error to send.
///
/// \param attachmentPaths Array of paths to files that should be send alongside with the error report.
///
/// \param completion Backtrace services response.
///
- (void)sendWithError:(NSError * _Nonnull)error attachmentPaths:(NSArray<NSString *> * _Nonnull)attachmentPaths completion:(void (^ _Nonnull)(BacktraceResult * _Nonnull))completion;
/// Automatically generates and sends a crash report to Backtrace services.
/// The services response is returned in a completion block.
/// \param message Custom message which will be sent alongside the report.
///
/// \param attachmentPaths Array of paths to files that should be send alongside with crash report.
///
/// \param completion Backtrace services response.
///
- (void)sendWithMessage:(NSString * _Nonnull)message attachmentPaths:(NSArray<NSString *> * _Nonnull)attachmentPaths completion:(void (^ _Nonnull)(BacktraceResult * _Nonnull))completion;
/// Automatically generates and sends a crash report to Backtrace services.
/// The services response is returned in a completion block.
/// \param attachmentPaths Array of paths to files that should be send alongside with crash report.
///
/// \param completion Backtrace services response.
///
- (void)sendWithAttachmentPaths:(NSArray<NSString *> * _Nonnull)attachmentPaths completion:(void (^ _Nonnull)(BacktraceResult * _Nonnull))completion;
/// Automatically generates and sends a crash report to Backtrace services.
/// The services response is returned in a completion block.
/// \param exception An exception to send.
///
/// \param attachmentPaths Array of paths to files that should be send alongside with crash report.
///
/// \param completion Backtrace services response.
///
- (void)sendWithException:(NSException * _Nullable)exception attachmentPaths:(NSArray<NSString *> * _Nonnull)attachmentPaths completion:(void (^ _Nonnull)(BacktraceResult * _Nonnull))completion;
@end


@interface BacktraceClient (SWIFT_EXTENSION(Backtrace)) <BacktraceReporting>
- (void)sendWithError:(NSError * _Nonnull)error attachmentPaths:(NSArray<NSString *> * _Nonnull)attachmentPaths completion:(void (^ _Nonnull)(BacktraceResult * _Nonnull))completion;
- (void)sendWithMessage:(NSString * _Nonnull)message attachmentPaths:(NSArray<NSString *> * _Nonnull)attachmentPaths completion:(void (^ _Nonnull)(BacktraceResult * _Nonnull))completion;
- (void)sendWithException:(NSException * _Nullable)exception attachmentPaths:(NSArray<NSString *> * _Nonnull)attachmentPaths completion:(void (^ _Nonnull)(BacktraceResult * _Nonnull))completion;
- (void)sendWithAttachmentPaths:(NSArray<NSString *> * _Nonnull)attachmentPaths completion:(void (^ _Nonnull)(BacktraceResult * _Nonnull))completion;
@end


@interface BacktraceClient (SWIFT_EXTENSION(Backtrace)) <BacktraceBreadcrumbProtocol>
@property (nonatomic, readonly, strong) BacktraceBreadcrumbs * _Nonnull breadcrumbs;
- (void)enableBreadcrumbs;
- (void)enableBreadcrumbs:(BacktraceBreadcrumbSettings * _Nonnull)breadcrumbSettings;
- (BOOL)addBreadcrumb:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes type:(enum BacktraceBreadcrumbType)type level:(enum BacktraceBreadcrumbLevel)level SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addBreadcrumb:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addBreadcrumb:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addBreadcrumb:(NSString * _Nonnull)message type:(enum BacktraceBreadcrumbType)type level:(enum BacktraceBreadcrumbLevel)level SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addBreadcrumb:(NSString * _Nonnull)message level:(enum BacktraceBreadcrumbLevel)level SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addBreadcrumb:(NSString * _Nonnull)message type:(enum BacktraceBreadcrumbType)type SWIFT_WARN_UNUSED_RESULT;
- (BOOL)clearBreadcrumbs SWIFT_WARN_UNUSED_RESULT;
@end

@class BacktraceDatabaseSettings;
@class BacktraceMetricsSettings;
enum BacktraceOomMode : NSInteger;

/// Backtrace client configuration settings.
SWIFT_CLASS("_TtC9Backtrace28BacktraceClientConfiguration")
@interface BacktraceClientConfiguration : NSObject
/// Client’s credentials. To learn more about credentials, see
/// https://help.backtrace.io/troubleshooting/what-is-a-submission-url
/// and https://help.backtrace.io/troubleshooting/what-is-a-submission-token .
@property (nonatomic, readonly, strong) BacktraceCredentials * _Nonnull credentials;
/// Database settings.
@property (nonatomic, strong) BacktraceDatabaseSettings * _Nonnull dbSettings;
/// Error-free metrics settings
@property (nonatomic, strong) BacktraceMetricsSettings * _Nonnull metricsSettings;
/// Breadcrumbs settings.
@property (nonatomic, strong) BacktraceBreadcrumbSettings * _Nonnull breadcrumbSettings;
/// Number of records sent in 1 minute. Default <code>30</code>.
@property (nonatomic) NSInteger reportsPerMin;
/// Flag indicating if the Backtrace client should report reports when the debugger is attached. Default <code>false</code>.
@property (nonatomic) BOOL allowsAttachingDebugger;
/// How the SDK should handle OOM detection.
/// Default is <code>.none</code> to preserve launch‑time performance unless the integrator opts‑in.
@property (nonatomic) enum BacktraceOomMode oomMode;
/// The legacy <code>detectOom</code> boolean remains for source compatibility but is now deprecated.
@property (nonatomic) BOOL detectOom SWIFT_DEPRECATED_MSG("", "oomMode");
/// Produces Backtrace client configuration settings.
/// \param credentials Backtrace server API credentials.
///
- (nonnull instancetype)initWithCredentials:(BacktraceCredentials * _Nonnull)credentials OBJC_DESIGNATED_INITIALIZER;
/// Produces Backtrace client configuration settings.
/// \param credentials Backtrace server API credentials.
///
/// \param dbSettings Backtrace database settings.
///
/// \param reportsPerMin Maximum number of records sent to Backtrace services in 1 minute. Default: <code>30</code>.
///
/// \param allowsAttachingDebugger if set to <code>true</code> BacktraceClient will report reports even when the debugger is attached. Default: <code>false</code>.
///
/// \param oomMode BacktraceOomMode [.none, .light, .full]
///
- (nonnull instancetype)initWithCredentials:(BacktraceCredentials * _Nonnull)credentials dbSettings:(BacktraceDatabaseSettings * _Nonnull)dbSettings reportsPerMin:(NSInteger)reportsPerMin allowsAttachingDebugger:(BOOL)allowsAttachingDebugger oomMode:(enum BacktraceOomMode)oomMode OBJC_DESIGNATED_INITIALIZER;
/// Legacy Initialiser for compatibility.
/// Produces Backtrace client configuration settings.
/// \param credentials Backtrace server API credentials.
///
/// \param dbSettings Backtrace database settings.
///
/// \param reportsPerMin Maximum number of records sent to Backtrace services in 1 minute. Default: <code>30</code>.
///
/// \param allowsAttachingDebugger if set to <code>true</code> BacktraceClient will report reports even when the debugger is attached. Default: <code>false</code>.
///
/// \param detectOOM if set to <code>true</code> BacktraceClient will detect when the app is out of memory. Default: <code>false</code>.
///
- (nonnull instancetype)initWithCredentials:(BacktraceCredentials * _Nonnull)credentials dbSettings:(BacktraceDatabaseSettings * _Nonnull)dbSettings reportsPerMin:(NSInteger)reportsPerMin allowsAttachingDebugger:(BOOL)allowsAttachingDebugger detectOOM:(BOOL)detectOOM SWIFT_DEPRECATED_MSG("Use init(credentials:dbSettings:reportsPerMin:allowsAttachingDebugger:oomMode:) instead");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BacktraceReport;
@class NSURLRequest;

/// Events produced by <code>BacktraceClient</code> class.
SWIFT_PROTOCOL("_TtP9Backtrace23BacktraceClientDelegate_")
@protocol BacktraceClientDelegate
@optional
/// Event executed before sending report data to Backtrace services.
/// Allows the delegate object to modify report right before sending.
/// \param report Backtrace report to send.
///
///
/// returns:
/// Modified Backtrace report.
- (BacktraceReport * _Nonnull)willSend:(BacktraceReport * _Nonnull)report SWIFT_WARN_UNUSED_RESULT;
/// Event executed before HTTP request to Backtrace services is made.
/// Allows the delegate object to modify request right before sending.
/// \param request HTTP request to send.
///
///
/// returns:
/// Modified HTTP request.
- (NSURLRequest * _Nonnull)willSendRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Event executed after receiving HTTP response from Backtrace services.
/// Allows the delegate object to react after receiving a response.
/// \param result Backtrace result.
///
- (void)serverDidRespond:(BacktraceResult * _Nonnull)result;
/// Event executed when connection to Backtrace services failed.
/// Allows the delegate object to react when connection fails.
/// \param error Error containing information about the failure cause.
///
- (void)connectionDidFail:(NSError * _Nonnull)error;
/// Event executed when number of sent reports in specific period of time was reached.
/// \param result Backtrace result.
///
- (void)didReachLimit:(BacktraceResult * _Nonnull)result;
@end


/// Provides logging functionality to IDE console.
SWIFT_CLASS("_TtC9Backtrace27BacktraceConsoleDestination")
@interface BacktraceConsoleDestination : BacktraceBaseDestination
/// Logs the event to console destination.
/// \param level logging level
///
/// \param msg message to log
///
/// \param file the name of the file in which it appears
///
/// \param function the name of the declaration in which it appears
///
/// \param line the line number on which it appears
///
- (void)logWithLevel:(enum BacktraceLogLevel)level msg:(NSString * _Nonnull)msg file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
- (nonnull instancetype)initWithLevel:(enum BacktraceLogLevel)level OBJC_DESIGNATED_INITIALIZER;
@end

@class PLCrashReporterConfig;
@class PLCrashReporter;

/// A wrapper around <code>PLCrashReporter</code>.
SWIFT_CLASS("_TtC9Backtrace22BacktraceCrashReporter")
@interface BacktraceCrashReporter : NSObject
/// Creates an instance of a crash reporter.
/// \param config A <code>PLCrashReporterConfig</code> configuration to use.
///
- (nonnull instancetype)initWithConfig:(PLCrashReporterConfig * _Nonnull)config;
/// Creates an instance of a crash reporter.
/// \param reporter An instance of <code>PLCrashReporter</code> to use.
///
- (nonnull instancetype)initWithReporter:(PLCrashReporter * _Nonnull)reporter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Backtrace server API credentials.
SWIFT_CLASS("_TtC9Backtrace20BacktraceCredentials")
@interface BacktraceCredentials : NSObject
/// Produces Backtrace server API credentials.
/// \param endpoint Endpoint to Backtrace services.
/// See more: https://help.backtrace.io/troubleshooting/what-is-a-submission-url
///
/// \param token Access token to Backtrace service.
/// See more: https://help.backtrace.io/troubleshooting/what-is-a-submission-token
///
- (nonnull instancetype)initWithEndpoint:(NSURL * _Nonnull)endpoint token:(NSString * _Nonnull)token OBJC_DESIGNATED_INITIALIZER;
/// Produces Backtrace server API credentials.
/// \param submissionUrl The submission URL containing authentication credentials.
///
- (nonnull instancetype)initWithSubmissionUrl:(NSURL * _Nonnull)submissionUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum RetryBehaviour : NSInteger;
enum RetryOrder : NSInteger;

/// Backtrace local database settings.
SWIFT_CLASS("_TtC9Backtrace25BacktraceDatabaseSettings")
@interface BacktraceDatabaseSettings : NSObject
/// Max record count stored in database. <code>0</code> means “no limit”. Default <code>0</code>.
@property (nonatomic) NSInteger maxRecordCount;
/// Maximum database size in MB. If value is equal to zero, then size is unlimited. Default <code>0</code>.
@property (nonatomic) NSInteger maxDatabaseSize;
/// How much seconds library should wait before next retry. Default <code>5</code>.
@property (nonatomic) NSInteger retryInterval;
/// Maximum number of retries. Default <code>3</code>.
@property (nonatomic) NSInteger retryLimit;
/// Retry behaviour. Default <code>RetryBehaviour.interval</code>.
@property (nonatomic) enum RetryBehaviour retryBehaviour;
/// Retry order. Default <code>RetryOder.queue</code>.
@property (nonatomic) enum RetryOrder retryOrder;
/// Enable the hostname to be reported. This will cause the end-user to get the Local Network permissions pop-up.
@property (nonatomic) BOOL reportHostName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDateFormatter;

/// Provides logging functionality to IDE console.
SWIFT_CLASS("_TtC9Backtrace32BacktraceFancyConsoleDestination")
@interface BacktraceFancyConsoleDestination : BacktraceBaseDestination
/// Used date formatter for logging.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSDateFormatter * _Nonnull dateFormatter;)
+ (NSDateFormatter * _Nonnull)dateFormatter SWIFT_WARN_UNUSED_RESULT;
/// Logs the event to console destination. Formats log in more verbose way.
/// \param level logging level
///
/// \param msg message to log
///
/// \param file the name of the file in which it appears
///
/// \param function the name of the declaration in which it appears
///
/// \param line the line number on which it appears
///
- (void)logWithLevel:(enum BacktraceLogLevel)level msg:(NSString * _Nonnull)msg file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
- (nonnull instancetype)initWithLevel:(enum BacktraceLogLevel)level OBJC_DESIGNATED_INITIALIZER;
@end

/// Logging levels.
typedef SWIFT_ENUM(NSInteger, BacktraceLogLevel, open) {
/// All logs logged to the destination.
  BacktraceLogLevelDebug = 0,
/// Warnings, info and errors logged to the destination.
  BacktraceLogLevelWarning = 1,
/// Info and errors logged to the destination.
  BacktraceLogLevelInfo = 2,
/// Only errors logged to the destination.
  BacktraceLogLevelError = 3,
/// No logs logged to the destination.
  BacktraceLogLevelNone = 4,
};


/// Logs Backtrace events.
SWIFT_CLASS("_TtC9Backtrace15BacktraceLogger")
@interface BacktraceLogger : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC9Backtrace16BacktraceMetrics")
@interface BacktraceMetrics : NSObject
@property (nonatomic, readonly) NSInteger count;
- (void)enableWithSettings:(BacktraceMetricsSettings * _Nonnull)settings;
- (void)addUniqueEventWithName:(NSString * _Nonnull)name;
- (void)addSummedEventWithName:(NSString * _Nonnull)name;
- (void)clearSummedEvents;
- (NSArray * _Nonnull)getSummedEvents SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getUniqueEvents SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Backtrace error-free metrics settings
SWIFT_CLASS("_TtC9Backtrace24BacktraceMetricsSettings")
@interface BacktraceMetricsSettings : NSObject
/// Max events count, will attempt to submit metrics when this limit is reached
@property (nonatomic) NSInteger maxEventsCount;
/// Time interval in seconds between sending metrics reports. <code>0</code> disables auto-send of metrics
/// Default: 30 minutes (1800 seconds)
@property (nonatomic) NSInteger timeInterval;
/// Time interval in seconds between retries of sending metrics reports. Some backoff and fuzzing is applied.
/// Default: 10 seconds
@property (nonatomic) NSInteger retryInterval;
/// Maximum number of retries. Default <code>3</code>.
@property (nonatomic) NSInteger retryLimit;
/// Custom submission URL. If null or empty will use default Backtrace metrics submission URL.
@property (nonatomic, copy) NSString * _Nonnull customSubmissionUrl;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Determines how the SDK should handle OOM (Out‑Of‑Memory) events.
typedef SWIFT_ENUM(NSInteger, BacktraceOomMode, open) {
/// Disable OOM tracking (identical to legacy <code>detectOOM = false</code>).
  BacktraceOomModeNone = 0,
/// Lightweight report (no symbolication, current thread).
  BacktraceOomModeLight = 1,
/// Full crash report (all threads, symbolicated) – legacy default.
  BacktraceOomModeFull = 2,
};

@class NSData;

/// Model represents single crash report which can be send to Backtrace services.
SWIFT_CLASS("_TtC9Backtrace15BacktraceReport")
@interface BacktraceReport : NSObject
/// Encoded informations about report like stack trace etc.
@property (nonatomic, readonly, copy) NSData * _Nonnull reportData;
/// Array of files paths attached to the report.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull attachmentPaths;
/// <code>Attributes</code> attached to the report.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Backtrace result statuses.
typedef SWIFT_ENUM(NSInteger, BacktraceReportStatus, open) {
/// Server error occurred while sending the data.
  BacktraceReportStatusServerError = 0,
/// Successfully sent data to server.
  BacktraceReportStatusOk = 1,
/// Debugger is attached.
  BacktraceReportStatusDebuggerAttached = 2,
/// Unknown error occurred.
  BacktraceReportStatusUnknownError = 3,
/// Client limit reached.
  BacktraceReportStatusLimitReached = 4,
};



/// Backtrace result containing the status and message.
SWIFT_CLASS("_TtC9Backtrace15BacktraceResult")
@interface BacktraceResult : NSObject
/// Backtrace message.
@property (nonatomic, copy) NSString * _Nonnull message;
/// Report.
@property (nonatomic, strong) BacktraceReport * _Nullable report;
/// Result status.
@property (nonatomic) enum BacktraceReportStatus backtraceStatus;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BacktraceResult (SWIFT_EXTENSION(Backtrace))
/// Description of <code>BacktraceResult</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("Crash")
@interface Crash : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

@interface Crash (SWIFT_EXTENSION(Backtrace))
@property (nonatomic, copy) NSArray<NSString *> * _Nullable attachmentPaths;
@property (nonatomic, copy) NSDate * _Nullable dateAdded;
@property (nonatomic, copy) NSString * _Nullable hashProperty;
@property (nonatomic, copy) NSData * _Nullable reportData;
@property (nonatomic) int64_t retryCount;
@end





/// Backtrace retrying behaviour for not successfully sent reports.
typedef SWIFT_ENUM(NSInteger, RetryBehaviour, open) {
/// Library will not retry sending report.
  RetryBehaviourNone = 0,
/// Library will retry sending report with interval specified in <code>BacktraceDatabaseSettings.retryInterval</code> property.
  RetryBehaviourInterval = 1,
};

/// Backtrace retrying order for not successfully sent reports.
typedef SWIFT_ENUM(NSInteger, RetryOrder, open) {
/// Library will retry sending oldest reports first (FIFO).
  RetryOrderQueue = 0,
/// Library will retry sending youngest reports first (LIFO).
  RetryOrderStack = 1,
};


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
