using Backtrace.Unity.Common;
using Backtrace.Unity.Types;
using System;
using System.Collections.Generic;
using System.IO;
using UnityEngine;

namespace Backtrace.Unity.Model.Database
{
    /// <summary>
    /// Backtrace Database attachment manager. Manage built-in BacktraceDatabase attachments
    /// </summary>
    internal class BacktraceDatabaseAttachmentManager
    {
        private readonly BacktraceDatabaseSettings _settings;
        private float _lastScreenTime;
        private string _lastScreenPath;
        private readonly object _lock = new object();
        public BacktraceDatabaseAttachmentManager(BacktraceDatabaseSettings settings)
        {
            _settings = settings;
        }

        public IEnumerable<string> GetReportAttachments(BacktraceData data)
        {
            return new List<string>()
            {
                GetScreenshotPath(data),
                GetUnityPlayerLogFile(data), 
                GetMinidumpPath(data)
            };
        }

        private string GetMinidumpPath(BacktraceData backtraceData)
        {
            if (_settings.MinidumpType == MiniDumpType.None)
            {
                return string.Empty;
            }
            //note that every minidump file generated by app ends with .dmp extension
            //its important information if you want to clear minidump file
            string minidumpDestinationPath = Path.Combine(_settings.DatabasePath, string.Format("{0}-dump.dmp", backtraceData.Uuid));
            var backtraceReport = backtraceData.Report;
            if (backtraceReport == null)
            {
                return string.Empty;
            }
            MinidumpException minidumpExceptionType = backtraceReport.ExceptionTypeReport
                ? MinidumpException.Present
                : MinidumpException.None;

            bool minidumpSaved = MinidumpHelper.Write(
                filePath: minidumpDestinationPath,
                options: _settings.MinidumpType,
                exceptionType: minidumpExceptionType);

            return minidumpSaved
                ? minidumpDestinationPath
                : string.Empty;
        }

        /// <summary>
        /// Get path to game screenshot when exception occured
        /// </summary>
        /// <returns>Path to game screenshot</returns>
        private string GetScreenshotPath(BacktraceData backtraceData)
        {
            if (!_settings.GenerateScreenshotOnException)
            {
                return string.Empty;
            }
            var screenshotPath = Path.Combine(_settings.DatabasePath, string.Format("{0}.jpg", backtraceData.Uuid));

            lock (_lock)
            {
                if (BacktraceDatabase.LastFrameTime == _lastScreenTime)
                {
                    if (File.Exists(_lastScreenPath))
                    {
                        File.Copy(_lastScreenPath, screenshotPath);
                        return screenshotPath;
                    }
                    return _lastScreenPath;
                }
                else
                {
                    // Create a texture the size of the screen, RGB24 format
                    int width = Screen.width;
                    int height = Screen.height;
                    Texture2D tex = new Texture2D(width, height, TextureFormat.RGB24, false);

                    // Read screen contents into the texture
                    tex.ReadPixels(new Rect(0, 0, width, height), 0, 0);
                    tex.Apply();

                    // Encode texture into JPG
                    byte[] bytes = tex.EncodeToJPG();

                    // For testing purposes, also write to a file in the project folder
                    File.WriteAllBytes(screenshotPath, bytes);
                    _lastScreenTime = BacktraceDatabase.LastFrameTime;
                    _lastScreenPath = screenshotPath;
                }
            }
            return screenshotPath;
        }



        /// <summary>
        /// Get path to Unity player logs.
        /// </summary>
        /// <returns>Path to unity player log</returns>
        private string GetUnityPlayerLogFile(BacktraceData backtraceData)
        {
            if (!_settings.AddUnityLogToReport)
            {
                return string.Empty;
            }
            var playerLogPath =
#if UNITY_STANDALONE_LINUX
                    string.Format("~/.config/unity3d/{0}/{1}/Player.log", Application.companyName, Application.productName);
#elif UNITY_STANDALONE_OSX
                    string.Format("~/Library/Logs/{0}/{1}/Player.log", Application.companyName, Application.productName);
#elif UNITY_STANDALONE_WIN
                    Path.Combine(
                        Directory.GetParent(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)).FullName,
                        "LocalLow",
                        Application.companyName,
                        Application.productName,
                        "Player.log");
#else
            string.Empty;
#endif
            if (string.IsNullOrEmpty(playerLogPath) || !File.Exists(playerLogPath))
            {
                return string.Empty;
            }
            var databaseLogPath = Path.Combine(_settings.DatabasePath, string.Format("{0}.log", backtraceData.Uuid));
            File.Copy(playerLogPath, databaseLogPath);
            return databaseLogPath;
        }
    }
}
